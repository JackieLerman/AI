'''
   Solves the generalized Tower of Hanoi using forms of AI search.
   Date: ???
   Name: YOUR NAME HERE
'''

from search import *


class HanoiProblem(Problem):
    '''
    Class to solve the M disk, K stack Hanoi problem.
    '''

    def __init__(self, initialstate):
        '''initialstate is the starting state'''
        Problem.__init__(self, initialstate)


    def goal_test(self,state):
        return None

    def result(self,state,action):
        '''
        Returns state that results from act.
        returned state is completely independent of state
        '''
        return None

    def actions(self, statestr):
        '''
        List of actions executable from state.
        '''
        return None


def printProb(searchtype,p):
    print(searchtype,end="\t")
    print("NActions %d\tNgoaltests %d\tNstates %d\tGoalState %s" %
          (p.succs,p.goal_tests,p.states,p.found) )
    print()


if __name__ == '__main__':
    initstate = None # TODO
    hp = HanoiProblem(initstate)
    p = InstrumentedProblem(hp)

    if len(sys.argv) == 1 or sys.argv[1] == 'bfs':
        breadth_first_graph_search(p)
        printProb('BFS',p)
    else:
        astar_search(p,hp.h)
        printProb('Astar',p)
